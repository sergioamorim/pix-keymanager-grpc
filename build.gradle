plugins {
  id("org.jetbrains.kotlin.jvm") version "$kotlinVersion"
  id("org.jetbrains.kotlin.kapt") version "$kotlinVersion"
  id("org.jetbrains.kotlin.plugin.jpa") version "$kotlinVersion"
  id("org.jetbrains.kotlin.plugin.allopen") version "$kotlinVersion"
  id("com.github.johnrengelman.shadow") version "7.0.0"
  id("io.micronaut.application") version "2.0.3"
  id("com.google.protobuf") version "0.8.15"
  id("jacoco")
}

version = "0.3.0"
group = "br.com.zup.edu.sergio.pix_keymanager_grpc"

repositories {
  mavenCentral()
}

micronaut {
  testRuntime("junit5")
  processing {
    incremental(true)
    annotations("br.com.zup.edu.sergio.pix_keymanager_grpc.*")
  }
}
dependencies {
  implementation("org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion")
  implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion")
  implementation("io.micronaut:micronaut-runtime:$micronautVersion")
  implementation("io.micronaut:micronaut-validation:$micronautVersion")
  implementation("io.micronaut:micronaut-http-client:$micronautVersion")
  implementation("io.micronaut.reactor:micronaut-reactor:2.0.0")
  implementation("io.micronaut.kotlin:micronaut-kotlin-runtime:3.0.0")
  implementation("io.micronaut.grpc:micronaut-grpc-runtime:3.0.0")
  implementation("io.micronaut.data:micronaut-data-hibernate-jpa:3.0.0")
  implementation("io.micronaut.sql:micronaut-jdbc-hikari:4.0.0")
  implementation("io.micronaut.xml:micronaut-jackson-xml:3.0.0")
  implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-csv:2.12.4")
  implementation("org.postgresql:postgresql:42.2.23.jre7")
  implementation("javax.annotation:javax.annotation-api:1.3.2")

  runtimeOnly("ch.qos.logback:logback-classic:1.2.5")
  runtimeOnly("com.fasterxml.jackson.module:jackson-module-kotlin:2.12.4")

  testImplementation("com.h2database:h2:1.4.200")
}


application {
  mainClass.set("br.com.zup.edu.sergio.pix_keymanager_grpc.ApplicationKt")
}
java {
  sourceCompatibility = JavaVersion.toVersion("11")
}

tasks {
  compileKotlin {
    kotlinOptions {
      jvmTarget = "11"
    }
  }
  compileTestKotlin {
    kotlinOptions {
      jvmTarget = "11"
    }
  }
  test {
    jacoco {
      excludes = ["$jacocoProtobufExclusionPattern"]
    }
    finalizedBy(tasks.jacocoTestReport)
  }
  jacocoTestReport {
    dependsOn(tasks.test)
    finalizedBy(tasks.jacocoTestCoverageVerification)
    afterEvaluate {
      classDirectories.from = files(classDirectories.files.collect {
        fileTree(dir: it, exclude: ["$jacocoProtobufExclusionPattern"])
      })
    }
  }
  jacocoTestCoverageVerification {
    afterEvaluate {
      classDirectories.from = files(classDirectories.files.collect {
        fileTree(dir: it, exclude: ["$jacocoProtobufExclusionPattern"])
      })
    }

    violationRules {
      rule {
        limit {
          minimum = "0.9".toBigDecimal()
        }
      }
    }
  }
}
sourceSets {
  main {
    java {
      srcDirs("build/generated/source/proto/main/grpc")
      srcDirs("build/generated/source/proto/main/java")
    }
  }
}

protobuf {
  protoc { artifact = "com.google.protobuf:protoc:3.17.3" }
  plugins {
    grpc { artifact = "io.grpc:protoc-gen-grpc-java:1.34.1" }
  }
  generateProtoTasks {
    all()*.plugins { grpc {} }
  }
}

jacoco { toolVersion("0.8.7") }
